#!/usr/bin/env python3
"""
C·∫≠p nh·∫≠t d·ªØ li·ªáu tin t·ª©c m·ªõi t·ª´ Techmeme
Usage: python update_news.py
"""
import sys
import os
import subprocess
import shutil
from pathlib import Path
import json
from datetime import datetime

# Force use Windows Python if available
PYTHON_PATHS = [
    r"C:\Users\ADMIN\AppData\Local\Programs\Python\Python313\python.exe",
    r"C:\Python313\python.exe",
    r"C:\Python312\python.exe", 
    r"C:\Python311\python.exe",
    sys.executable
]

def get_windows_python():
    """T√¨m Python interpreter c√≥ th·ªÉ d√πng ƒë∆∞·ª£c v·ªõi google-generativeai"""
    for python_path in PYTHON_PATHS:
        if os.path.exists(python_path):
            try:
                # Test import
                result = subprocess.run([
                    python_path, "-c", 
                    "import google.generativeai; print('OK')"
                ], capture_output=True, text=True, timeout=10)
                if result.returncode == 0:
                    return python_path
            except (subprocess.TimeoutExpired, FileNotFoundError):
                continue
    return None

# Add src to Python path
sys.path.append(str(Path(__file__).parent / "src"))

def print_step(step, message):
    """In b∆∞·ªõc th·ª±c hi·ªán v·ªõi format ƒë·∫πp"""
    print(f"[{step}/4] {message}")
    print("-" * 50)

def run_pipeline():
    """Ch·∫°y pipeline ƒë·ªÉ l·∫•y d·ªØ li·ªáu m·ªõi"""
    print_step(1, "üîÑ ƒêang l·∫•y d·ªØ li·ªáu m·ªõi t·ª´ Techmeme...")
    
    # T√¨m Python interpreter ph√π h·ª£p
    windows_python = get_windows_python()
    if not windows_python:
        print("‚ùå Kh√¥ng t√¨m th·∫•y Python interpreter c√≥ google-generativeai")
        print("üí° C√†i ƒë·∫∑t b·∫±ng: py -m pip install google-generativeai")
        return False
    
    print(f"‚úÖ S·ª≠ d·ª•ng Python: {windows_python}")
    
    # Import v√† ch·∫°y pipeline tr·ª±c ti·∫øp
    try:
        # Ensure sys.path c√≥ src ƒë·ªÉ import ho·∫°t ƒë·ªông
        src_path = str(Path(__file__).parent / "src")
        if src_path not in sys.path:
            sys.path.insert(0, src_path)
            
        from src.pipelines.news_pipeline import NewsPipeline
        pipeline = NewsPipeline()
        print("üìä ƒêang x·ª≠ l√Ω d·ªØ li·ªáu v·ªõi AI...")
        pipeline.run(top_n=25)
        print("‚úÖ L·∫•y d·ªØ li·ªáu th√†nh c√¥ng!")
        return True
    except Exception as e:
        print(f"‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu: {e}")
        import traceback
        print("üîç Chi ti·∫øt l·ªói:")
        traceback.print_exc()
        return False

def copy_data():
    """Copy d·ªØ li·ªáu t·ª´ outputs ra th∆∞ m·ª•c g·ªëc"""
    print_step(2, "üìÅ ƒêang copy d·ªØ li·ªáu...")
    
    from src.services.storage_service import StorageService

    storage = StorageService()
    source = storage.output_path
    target = Path("summaries.json")
    
    try:
        if source.exists():
            shutil.copy2(source, target)
            print("‚úÖ Copy d·ªØ li·ªáu th√†nh c√¥ng!")
            return True
        else:
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y file: {source}")
            return False
    except Exception as e:
        print(f"‚ùå L·ªói khi copy d·ªØ li·ªáu: {e}")
        return False

def update_timestamp():
    """C·∫≠p nh·∫≠t timestamp trong file JSON"""
    print_step(3, "‚è∞ C·∫≠p nh·∫≠t th·ªùi gian...")
    
    try:
        with open("summaries.json", "r", encoding="utf-8") as f:
            data = json.load(f)
        
        # Th√™m timestamp
        data["last_updated"] = datetime.now().isoformat()
        data["total_items"] = len(data.get("items", []))
        
        with open("summaries.json", "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        
        print("‚úÖ C·∫≠p nh·∫≠t timestamp th√†nh c√¥ng!")
        return True
    except Exception as e:
        print(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t timestamp: {e}")
        return False

def show_summary():
    """Hi·ªÉn th·ªã t√≥m t·∫Øt k·∫øt qu·∫£"""
    print_step(4, "üìä T√≥m t·∫Øt k·∫øt qu·∫£")
    
    try:
        with open("summaries.json", "r", encoding="utf-8") as f:
            data = json.load(f)
        
        items = data.get("items", [])
        last_updated = data.get("last_updated", "Unknown")
        
        print(f"üìà T·ªïng s·ªë b√†i vi·∫øt: {len(items)}")
        print(f"‚è∞ C·∫≠p nh·∫≠t l√∫c: {last_updated}")
        
        if items:
            print(f"üì∞ B√†i m·ªõi nh·∫•t: {items[0].get('title', 'N/A')[:80]}...")
            
            # Th·ªëng k√™ theo lo·∫°i
            types = {}
            for item in items:
                t = item.get('type', 'other')
                types[t] = types.get(t, 0) + 1
            
            print("üìä Ph√¢n lo·∫°i:")
            for type_name, count in types.items():
                print(f"   - {type_name}: {count} b√†i")
        
        print("\nüåê Website s·∫Ω t·ª± ƒë·ªông hi·ªÉn th·ªã d·ªØ li·ªáu m·ªõi!")
        print("üí° Refresh trang web (F5) ƒë·ªÉ xem tin t·ª©c m·ªõi")
        
    except Exception as e:
        print(f"‚ùå L·ªói khi hi·ªÉn th·ªã t√≥m t·∫Øt: {e}")

def main():
    """H√†m ch√≠nh"""
    print("üöÄ C·∫¨P NH·∫¨T D·ªÆ LI·ªÜU TIN T·ª®C")
    print("=" * 40)
    print(f"‚è∞ Th·ªùi gian: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    print("=" * 40)
    
    # Debug info
    print("üîç Debug info:")
    print(f"   Python: {sys.executable}")
    print(f"   Working dir: {os.getcwd()}")
    print(f"   Sys.path[0]: {sys.path[0]}")
    
    # Ki·ªÉm tra m√¥i tr∆∞·ªùng
    if not Path("src").exists():
        print("‚ùå Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c src!")
        print("üí° H√£y ch·∫°y script n√†y t·ª´ th∆∞ m·ª•c g·ªëc c·ªßa project")
        sys.exit(1)
    
    # Th·ª±c hi·ªán c√°c b∆∞·ªõc
    success = True
    
    # B∆∞·ªõc 1: Ch·∫°y pipeline
    if not run_pipeline():
        success = False
    
    # B∆∞·ªõc 2: Copy d·ªØ li·ªáu
    if success and not copy_data():
        success = False
    
    # B∆∞·ªõc 3: C·∫≠p nh·∫≠t timestamp
    if success and not update_timestamp():
        success = False
    
    # B∆∞·ªõc 4: Hi·ªÉn th·ªã t√≥m t·∫Øt
    if success:
        show_summary()
        print("\nüéâ C·∫¨P NH·∫¨T TH√ÄNH C√îNG!")
    else:
        print("\n‚ùå C·∫¨P NH·∫¨T TH·∫§T B·∫†I!")
        print("üí° Ki·ªÉm tra l·ªói ·ªü tr√™n v√† th·ª≠ l·∫°i")
        sys.exit(1)

if __name__ == "__main__":
    main()
