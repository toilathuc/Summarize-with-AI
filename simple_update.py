#!/usr/bin/env python3
"""Create a lightweight summaries file without using the AI pipeline."""

from __future__ import annotations

import argparse
import json
import shutil
import sys
from datetime import datetime, timezone
from pathlib import Path
from typing import Dict, List

# Ensure the project root (containing `src/`) is importable when executing directly.
ROOT_DIR = Path(__file__).resolve().parent
if str(ROOT_DIR) not in sys.path:
    sys.path.insert(0, str(ROOT_DIR))

from src.domain import FeedArticle  # noqa: E402
from src.services import FeedService, StorageService  # noqa: E402

PUBLIC_SUMMARIES = ROOT_DIR / "summaries.json"


def build_simple_item(article: FeedArticle) -> Dict[str, object]:
    """Convert a feed article into a minimal summary structure."""
    summary_text = article.summary_text or article.content_text or ""
    bullet = summary_text[:180].strip()
    if not bullet:
        bullet = "Summary not available. Open the original article for details."

    return {
        "title": article.title,
        "url": article.original_url or article.techmeme_url,
        "techmeme_url": article.techmeme_url,
        "bullets": [bullet],
        "why_it_matters": "Generated by simple_update.py without AI summarisation.",
        "type": "news",
    }


def run_simple_update(limit: int) -> Path:
    """Fetch articles, build simple summaries, and persist them for the UI."""
    feed_service = FeedService()
    articles = feed_service.fetch_latest(limit=limit)

    items: List[Dict[str, object]] = [build_simple_item(article) for article in articles]
    payload = {
        "items": items,
        "last_updated": datetime.now(tz=timezone.utc).isoformat(),
        "total_items": len(items),
        "mode": "simple",
        "source": "techmeme",
    }

    storage = StorageService()
    output_path = storage.output_path
    output_path.parent.mkdir(parents=True, exist_ok=True)
    with output_path.open("w", encoding="utf-8") as handle:
        json.dump(payload, handle, ensure_ascii=False, indent=2)
    return output_path


def copy_to_public_location(source: Path, destination: Path) -> Path:
    if not source.exists():
        raise FileNotFoundError(f"Summaries file not found at {source}")
    shutil.copy2(source, destination)
    return destination


def parse_args(argv: List[str] | None = None) -> argparse.Namespace:
    parser = argparse.ArgumentParser(description="Generate basic Techmeme summaries without AI.")
    parser.add_argument(
        "--limit",
        type=int,
        default=15,
        help="Number of items to include in the simple summaries (default: 15).",
    )
    parser.add_argument(
        "--output",
        type=Path,
        default=PUBLIC_SUMMARIES,
        help="Public JSON location for the frontend (default: ./summaries.json).",
    )
    return parser.parse_args(argv)


def main(argv: List[str] | None = None) -> None:
    args = parse_args(argv)
    if args.limit <= 0:
        raise SystemExit("The --limit value must be greater than zero.")

    print("Generating simple summaries (no AI)...")
    try:
        source_path = run_simple_update(limit=args.limit)
        public_path = copy_to_public_location(source_path, args.output)
    except Exception as exc:  # pylint: disable=broad-except
        raise SystemExit(f"Simple update failed: {exc}") from exc

    print(f"Simple summaries saved to: {source_path}")
    if public_path != source_path:
        print(f"Public copy available at: {public_path}")
    print("Done.")


if __name__ == "__main__":
    main()
